// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/cinp/go (interfaces: CInPClient)
//
// Generated by this command:
//
//	mockgen -write_generate_directive -destination=mock_cinp.go -package=test_contractor github.com/cinp/go CInPClient
//

// Package test_contractor is a generated GoMock package.
package test_contractor

import (
	context "context"
	reflect "reflect"

	cinp "github.com/cinp/go"
	gomock "go.uber.org/mock/gomock"
)

//go:generate mockgen -write_generate_directive -destination=mock_cinp.go -package=test_contractor github.com/cinp/go CInPClient

// MockCInPClient is a mock of CInPClient interface.
type MockCInPClient struct {
	ctrl     *gomock.Controller
	recorder *MockCInPClientMockRecorder
}

// MockCInPClientMockRecorder is the mock recorder for MockCInPClient.
type MockCInPClientMockRecorder struct {
	mock *MockCInPClient
}

// NewMockCInPClient creates a new mock instance.
func NewMockCInPClient(ctrl *gomock.Controller) *MockCInPClient {
	mock := &MockCInPClient{ctrl: ctrl}
	mock.recorder = &MockCInPClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCInPClient) EXPECT() *MockCInPClientMockRecorder {
	return m.recorder
}

// Call mocks base method.
func (m *MockCInPClient) Call(arg0 context.Context, arg1 string, arg2 *map[string]any, arg3 any) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Call", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// Call indicates an expected call of Call.
func (mr *MockCInPClientMockRecorder) Call(arg0, arg1, arg2, arg3 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Call", reflect.TypeOf((*MockCInPClient)(nil).Call), arg0, arg1, arg2, arg3)
}

// CallMulti mocks base method.
func (m *MockCInPClient) CallMulti(arg0 context.Context, arg1 string, arg2 *map[string]any) (*map[string]map[string]any, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CallMulti", arg0, arg1, arg2)
	ret0, _ := ret[0].(*map[string]map[string]any)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CallMulti indicates an expected call of CallMulti.
func (mr *MockCInPClientMockRecorder) CallMulti(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CallMulti", reflect.TypeOf((*MockCInPClient)(nil).CallMulti), arg0, arg1, arg2)
}

// ClearHeader mocks base method.
func (m *MockCInPClient) ClearHeader(arg0 string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ClearHeader", arg0)
}

// ClearHeader indicates an expected call of ClearHeader.
func (mr *MockCInPClientMockRecorder) ClearHeader(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClearHeader", reflect.TypeOf((*MockCInPClient)(nil).ClearHeader), arg0)
}

// Create mocks base method.
func (m *MockCInPClient) Create(arg0 context.Context, arg1 string, arg2 cinp.Object) (*cinp.Object, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0, arg1, arg2)
	ret0, _ := ret[0].(*cinp.Object)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockCInPClientMockRecorder) Create(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockCInPClient)(nil).Create), arg0, arg1, arg2)
}

// Delete mocks base method.
func (m *MockCInPClient) Delete(arg0 context.Context, arg1 cinp.Object) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockCInPClientMockRecorder) Delete(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockCInPClient)(nil).Delete), arg0, arg1)
}

// DeleteURI mocks base method.
func (m *MockCInPClient) DeleteURI(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteURI", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteURI indicates an expected call of DeleteURI.
func (mr *MockCInPClientMockRecorder) DeleteURI(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteURI", reflect.TypeOf((*MockCInPClient)(nil).DeleteURI), arg0, arg1)
}

// Describe mocks base method.
func (m *MockCInPClient) Describe(arg0 context.Context, arg1 string) (*cinp.Describe, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Describe", arg0, arg1)
	ret0, _ := ret[0].(*cinp.Describe)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Describe indicates an expected call of Describe.
func (mr *MockCInPClientMockRecorder) Describe(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Describe", reflect.TypeOf((*MockCInPClient)(nil).Describe), arg0, arg1)
}

// Get mocks base method.
func (m *MockCInPClient) Get(arg0 context.Context, arg1 string) (*cinp.Object, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0, arg1)
	ret0, _ := ret[0].(*cinp.Object)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockCInPClientMockRecorder) Get(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockCInPClient)(nil).Get), arg0, arg1)
}

// List mocks base method.
func (m *MockCInPClient) List(arg0 context.Context, arg1, arg2 string, arg3 map[string]any, arg4, arg5 int) ([]string, int, int, int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", arg0, arg1, arg2, arg3, arg4, arg5)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(int)
	ret2, _ := ret[2].(int)
	ret3, _ := ret[3].(int)
	ret4, _ := ret[4].(error)
	return ret0, ret1, ret2, ret3, ret4
}

// List indicates an expected call of List.
func (mr *MockCInPClientMockRecorder) List(arg0, arg1, arg2, arg3, arg4, arg5 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockCInPClient)(nil).List), arg0, arg1, arg2, arg3, arg4, arg5)
}

// ListIds mocks base method.
func (m *MockCInPClient) ListIds(arg0 context.Context, arg1, arg2 string, arg3 map[string]any, arg4 int) <-chan string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListIds", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(<-chan string)
	return ret0
}

// ListIds indicates an expected call of ListIds.
func (mr *MockCInPClientMockRecorder) ListIds(arg0, arg1, arg2, arg3, arg4 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListIds", reflect.TypeOf((*MockCInPClient)(nil).ListIds), arg0, arg1, arg2, arg3, arg4)
}

// SetHeader mocks base method.
func (m *MockCInPClient) SetHeader(arg0, arg1 string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetHeader", arg0, arg1)
}

// SetHeader indicates an expected call of SetHeader.
func (mr *MockCInPClientMockRecorder) SetHeader(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetHeader", reflect.TypeOf((*MockCInPClient)(nil).SetHeader), arg0, arg1)
}

// Update mocks base method.
func (m *MockCInPClient) Update(arg0 context.Context, arg1 cinp.Object) (*cinp.Object, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0, arg1)
	ret0, _ := ret[0].(*cinp.Object)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockCInPClientMockRecorder) Update(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockCInPClient)(nil).Update), arg0, arg1)
}

// UpdateMulti mocks base method.
func (m *MockCInPClient) UpdateMulti(arg0 context.Context, arg1 string, arg2 *map[string]any, arg3 *map[string]cinp.Object) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateMulti", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateMulti indicates an expected call of UpdateMulti.
func (mr *MockCInPClientMockRecorder) UpdateMulti(arg0, arg1, arg2, arg3 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateMulti", reflect.TypeOf((*MockCInPClient)(nil).UpdateMulti), arg0, arg1, arg2, arg3)
}
